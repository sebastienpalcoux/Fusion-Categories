sage: L=[]
....: with open('ListUpToRank21(p>r).txt') as f:	# Egyptian fractions
....:     for line in f:
....:         t = eval(line)
....:         l=[int(t[-1]/i) for i in t]		# Transform into types
....:         l.sort()
....:         if not l in L:				# Avoid redundency
....:             L.append(l)
....: L.sort()
sage: len(L)
187
sage: Nr=[0 for i in range(21)]
sage: for l in L:
....:     Nr[len(l)-1]+=1
....: 
sage: Nr
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 22, 2, 28, 0, 8, 122]
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeCriteria.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/TimeFunction.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/EquiPartition.sage
sage: L1=[]
....: for l in L:
....:     if GcdCriterion(l):
....:         L1.append(l)
....: 
sage: len(L1)
81
sage: L2=[]
....: for l in L1:
....:     if TypeTest(ListToType(l)):
....:         L2.append(l)
....: 
sage: len(L2)
75
sage: L3=[]
....: for l in L2:
....:     print(l)
....:     if LocalCriterionAll(ListToType(l),1):
....:         L3.append(l)
sage: len(L3)
40
sage: L4=[]
....: for l in L3:
....:     if len(Theorem4Check(l))>0:	
....:         L4.append(l)
....:     else:
....:         print(l)
....: 
sage: len(L4)
40				# just for double-check, ok no problem
sage: LNP=[]; LP=[]
....: for l in L4:
....:     if l[1]>1:
....:         LP.append(l)
....:     else:
....:         LNP.append(l)
....: 
sage: len(LNP)
12
sage: len(LP)
28
sage: %time LNP2=AllCriteria(LNP)
CPU times: user 5min 34s, sys: 3.96 ms, total: 5min 34s
Wall time: 5min 34s
sage: len(LNP2)
2
sage: TypesToPreNormalizAlone(LNP2)
[1, 1, 72, 184, 207, 207, 216, 828, 828, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 2484]
[1, 1, 72, 184, 216, 621, 621, 828, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 2484]
sage: TypesToPreNormalizAlone(LP)
[1, 3, 7, 23, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 322, 1288, 1288, 1932, 1932, 1932]
[1, 5, 6, 12, 60, 60, 138, 345, 345, 460, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690]
[1, 5, 8, 27, 135, 2484, 2760, 2760, 4140, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 12420]
[1, 5, 8, 69, 1080, 1080, 1380, 3105, 4968, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 12420]
[1, 5, 12, 15, 15, 45, 414, 460, 828, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 2070]
[1, 6, 6, 12, 12, 19, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 76, 114]
[1, 6, 18, 19, 76, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 228, 342]
[1, 6, 18, 19, 76, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 228, 342, 684]
[1, 6, 18, 19, 76, 228, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 684, 1026]
[1, 8, 15, 15, 60, 120, 184, 345, 552, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 1380]
[1, 8, 15, 23, 135, 2484, 2760, 2760, 4140, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 6210, 12420]
[1, 9, 10, 45, 45, 138, 207, 230, 690, 690, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035]
[1, 9, 20, 24, 69, 69, 828, 920, 1656, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070, 4140]
[1, 9, 21, 23, 126, 161, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 414, 1449, 1449, 1449]
[1, 9, 21, 23, 126, 161, 828, 828, 828, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 2898]
[1, 12, 17, 20, 30, 85, 204, 255, 340, 340, 340, 340, 340, 340, 340, 340]
[1, 12, 23, 30, 40, 115, 276, 345, 920, 920, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380]
[1, 12, 23, 50, 276, 575, 575, 575, 1380, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 1725, 3450]
[1, 12, 23, 50, 276, 575, 1380, 1725, 4600, 4600, 6900, 6900, 6900, 6900, 6900, 6900, 6900, 6900, 6900, 6900, 6900]
[1, 12, 30, 40, 69, 138, 345, 345, 460, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 690, 1380]
[1, 12, 30, 40, 69, 345, 345, 460, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 1380, 1380]
[1, 15, 16, 24, 115, 345, 690, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 2760, 2760]
[1, 23, 46, 69, 72, 144, 207, 552, 552, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 1656]
[1, 23, 69, 72, 144, 207, 368, 414, 552, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 828, 1656]
[1, 36, 36, 92, 92, 108, 108, 414, 414, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 621, 1242]
[1, 45, 75, 75, 100, 207, 2070, 2300, 4140, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 5175, 10350]
[1, 85, 153, 170, 540, 612, 1836, 2295, 3060, 3060, 3060, 3060, 3060, 3060, 3060, 3060]
[1, 115, 115, 345, 540, 648, 7452, 8280, 14904, 18630, 18630, 18630, 18630, 18630, 18630, 18630, 18630, 18630, 18630, 18630, 37260]

# all excluded by: 
for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
except one requiring
for i in *; do timeout 10s normaliz -x=4 -c "$i"; done

End of the proof.
