Below are the computational details for the ranks 22, 23 and 24:

## Rank 22 ##

sage: L=[]
....: with open('rep22_with_prime_above_22.txt') as f:
....:     for line in f:
....:         t = eval(line)
....:         l=[int(t[-1]/i) for i in t]
....:         l.sort()
....:         if not l in L:
....:             L.append(l)
sage: L.sort()
sage: len(L)
1915
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeCriteria.sage

sage: %time L1=TypesCriteria(L)
CPU times: user 559 ms, sys: 1.92 s, total: 2.48 s
Wall time: 5.86 s
sage: len(L1)
688
sage: %time L2=GradingCriteria(L1)
CPU times: user 1.54 s, sys: 2.2 s, total: 3.74 s
Wall time: 7.89 s
sage: len(L2)
484
sage: TypesToPreNormalizAlone(L2)
for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
# There remain 32 uncompleted types + 0 with a solution
for i in *; do timeout 10s normaliz -x=4 -c "$i"; done
# There remain 30 uncompleted types + 0 with a solution
for i in *; do timeout 1000s normaliz -x=4 -c "$i"; done
# There remain 22 uncompleted types + 0 with a solution

[[1,23,23,24,40,115,240,368,690,1104,1380,1380,1380,1380,1380,1380,1380,1380,1380,1380,1380,2760],
[1,36,36,36,36,36,36,36,36,36,36,36,92,92,108,207,621,621,828,1242,1242,1242],
[1,36,36,92,92,108,108,207,621,621,828,1242,1242,1242,1242,1242,1242,1242,1242,1242,1242,1242],
[1,36,36,92,92,108,108,414,414,621,621,621,621,621,621,621,621,621,621,621,1242,2484],
[1,36,63,161,184,207,252,1656,1656,1656,2898,2898,2898,2898,2898,2898,2898,2898,2898,2898,2898,5796],
[1,45,45,60,75,100,207,2070,2300,4140,5175,5175,5175,5175,5175,5175,5175,5175,5175,5175,5175,10350],
[1,46,69,69,69,72,144,184,552,552,828,828,828,828,828,828,828,828,828,828,828,1656],
[1,46,69,72,144,184,207,207,828,828,1104,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656],
[1,69,69,69,72,144,184,368,414,552,828,828,828,828,828,828,828,828,828,828,828,1656],
[1,69,72,92,92,144,207,207,414,1104,1104,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656],
[1,69,72,138,144,184,207,207,368,1104,1104,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656,1656],
[1,69,72,138,144,207,207,736,736,736,736,736,736,736,736,736,736,736,2208,3312,3312,3312],
[1,69,72,138,144,207,207,736,736,2208,2208,3312,3312,3312,3312,3312,3312,3312,3312,3312,3312,3312],
[1,72,72,184,225,225,345,4140,4600,8280,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350,20700],
[1,75,75,115,200,368,1200,2760,3450,9200,9200,13800,13800,13800,13800,13800,13800,13800,13800,13800,13800,13800],
[1,100,100,207,345,575,900,2300,2300,2300,2300,2300,2300,2300,2300,2300,2300,2300,6900,10350,10350,10350],
[1,100,100,207,345,575,900,2300,2300,6900,6900,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350],
[1,115,115,207,276,540,648,7452,8280,14904,18630,18630,18630,18630,18630,18630,18630,18630,18630,18630,18630,37260],
[1,115,115,368,600,1725,2400,3450,9200,9200,13800,13800,13800,13800,13800,13800,13800,13800,13800,13800,13800,27600],
[1,115,207,270,900,1150,3105,6900,6900,20700,20700,31050,31050,31050,31050,31050,31050,31050,31050,31050,31050,31050],
[1,120,180,207,460,600,2300,5175,5175,6900,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350,10350,20700],
[1,207,207,276,2250,2875,3600,41400,46000,82800,103500,103500,103500,103500,103500,103500,103500,103500,103500,103500,103500,207000]]

All perfect

## Rank 23 ##

sage: L=[]
....: with open('ce_23.txt') as f:
....:     for line in f:
....:         t = eval(line)
....:         l=[int(t[-1]/i) for i in t]
....:         l.sort()
....:         if not l in L:
....:             L.append(l)
....: 
sage: L.sort()
sage: len(L)
93
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeCriteria.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %time L1=TypesCriteria(L)
CPU times: user 32.5 ms, sys: 92.7 ms, total: 125 ms
Wall time: 267 ms
sage: len(L1)
43
sage: %time L2=GradingCriteria(L1)
CPU times: user 50.4 ms, sys: 78.4 ms, total: 129 ms
Wall time: 255 ms
sage: len(L2)
39
sage: TypesToPreNormalizAlone(L2)
for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
# There remains only:
[1,540,725,1450,2610,3132,8100,26100,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,78300]


## Rank 24 ##

sage: L=[]
....: with open('rep24_with_prime_above_24.txt') as f:
....:     for line in f:
....:         t = eval(line)
....:         l=[int(t[-1]/i) for i in t]
....:         l.sort()
....:         if not l in L:
....:             L.append(l)
sage: L.sort()
sage: len(L)
1443
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeCriteria.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %time L1=TypesCriteria(L)
CPU times: user 545 ms, sys: 1.67 s, total: 2.21 s
Wall time: 4.74 s
sage: len(L1)
693
sage: %time L2=GradingCriteria(L1)
CPU times: user 1.02 s, sys: 1.71 s, total: 2.72 s
Wall time: 5.68 s
sage: len(L2)
550
sage: TypesToPreNormalizAlone(L2)
for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
# There remain 29 uncompleted types + 0 with a solution
for i in *; do timeout 10s normaliz -x=4 -c "$i"; done
# There remain 22 uncompleted types + 0 with a solution
for i in *; do timeout 1000s normaliz -x=4 -c "$i"; done
# There remain 16 uncompleted types + 0 with a solution

[[1,40,45,45,60,87,174,348,1160,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,3480],
[1,40,45,45,60,145,348,522,1044,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,2610,3480],
[1,58,75,174,180,450,522,1450,2610,6525,6525,6525,6525,6525,6525,6525,6525,6525,6525,6525,6525,6525,6525,8700],
[1,87,90,96,145,435,720,1392,4640,10440,10440,10440,10440,10440,10440,10440,10440,10440,10440,10440,10440,10440,10440,13920],
[1,105,105,105,280,744,868,3720,5208,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510,6510],
[1,120,120,145,150,232,725,725,1740,4350,4350,4350,4350,4350,4350,4350,4350,4350,4350,4350,4350,4350,4350,5800],
[1,135,200,232,435,675,4350,8700,15660,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,52200],
[1,135,200,232,675,1740,3915,4350,17400,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,52200],
[1,135,200,290,435,675,3132,5220,17400,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,39150,52200],
[1,145,270,432,435,720,1305,4640,13920,31320,31320,31320,31320,31320,31320,31320,31320,31320,31320,31320,31320,31320,31320,41760],
[1,270,432,435,720,725,3915,11600,34800,78300,78300,78300,78300,78300,78300,78300,78300,78300,78300,78300,78300,78300,78300,104400],
[1,290,290,540,870,3132,8100,11745,23490,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,78300],
[1,290,435,540,870,2900,3132,8100,26100,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,78300],
[1,435,540,580,1450,2610,3132,8100,26100,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,78300],
[1,540,725,1450,2610,3132,8100,26100,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,58725,78300,234900],
[1,540,725,1450,2610,3132,8100,26100,78300,176175,176175,176175,176175,176175,176175,176175,176175,176175,176175,176175,176175,176175,176175,234900]]
