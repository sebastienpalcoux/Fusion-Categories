sage: L=[]; c=0; cc=0
....: with open('Rank14.txt') as f:
....:     for line in f:
....:         t = eval(line); c+=1
....:         l=[int(t[-1]/i) for i in t]
....:         l.sort()
....:         s=list(factor(sum([i**2 for i in l])))
....:         if not l in L:
....:             cc+=1
....:             if l[-1]>1 and s[-1][0]<=len(l)/2:	# non-pointed and Theorem 1.1(2)
....:                 L.append(l)
sage: L.sort()
sage: c;cc; len(L)
29205
29113
29061
sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeCriteria.sage
....: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %time L2=TypesCriteria(L)
CPU times: user 9.4 s, sys: 21 s, total: 30.4 s
Wall time: 1min 12s
sage: len(L2)
13556
sage: %time L3=GradingCriteria(L2)
CPU times: user 15.2 s, sys: 28.9 s, total: 44.1 s
Wall time: 1min 36s
sage: len(L3)
10046
sage: TypesToPreNormalizAlone(L3)
for i in *; do timeout 0.1s normaliz -x=4 -c "$i"; done
# It rests 765 uncompleted types + 34 with solutions

for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
# It rests 467 uncompleted types + 49 with solutions
for i in *; do timeout 100s normaliz -x=4 -c "$i"; done
# It rests 339 uncompleted types + 61 with solutions
for i in *; do timeout 1000s normaliz -x=4 -c "$i"; done	# or more, by Winfried
# It rests 224 uncompleted types + 75 with solutions

sage: len(L)
299
sage: TypesToNormalizSingleCo(L)
# that produces 3008 files,

for i in *; do timeout 10s normaliz -x=4 -c "$i"; done
# It rests 946 uncompleted items up to some with solutions counted at the end

for i in *; do timeout 100s normaliz -x=4 -c "$i"; done
# It rests 677 uncompleted items up to...

for i in *; do timeout 1000s normaliz -x=4 -c "$i"; done
# It rests 404 uncompleted items up to...

for i in *; do timeout 10000s normaliz -x=4 -c "$i"; done
# It rests 285 uncompleted items up to...

for i in *; do timeout 120000s normaliz -x=4 -c "$i"; done
# It rests 230 uncompleted items + 80 with solution

# Extra exclusion, the non-perfect with new Modular Grading feature on Normaliz:

[1,1,135,135,140,252,1080,1512,1890,1890,1890,3780,3780,3780],		# excluded (see below)

## There remain 160 uncompleted items + 85 with solution

# in: 166 from 37 types (7 non-perfect + 30 perfect)
Lin=[[1,1,2,3,3,24,24,42,42,56,56,56,84,84],				# also in Lout
[1,1,2,3,3,24,120,150,150,200,200,200,300,300],				#
[1,1,24,24,36,40,45,45,90,90,90,180,180,180],
[1,1,40,84,90,126,315,315,504,630,840,1260,1260,1260],
[1,1,45,45,90,140,168,168,630,630,840,1260,1260,1260],
[1,1,60,60,84,140,189,189,540,1260,1260,1890,1890,1890],
[1,1,90,90,90,108,140,378,945,945,1260,1890,1890,1890],
[1,30,30,30,105,105,105,120,140,168,280,420,420,420],
[1,30,35,63,90,90,126,140,252,315,420,630,630,630],
[1,35,60,105,105,168,210,240,560,560,560,560,840,840],
[1,35,84,108,135,140,252,315,420,1260,1260,1890,1890,1890],
[1,35,105,108,126,135,140,378,420,1260,1260,1890,1890,1890],
[1,40,105,105,168,175,200,350,1050,1050,1400,2100,2100,2100],
[1,45,56,63,63,70,120,120,360,840,840,1260,1260,1260],
[1,50,50,105,105,168,175,210,600,1400,1400,2100,2100,2100],
[1,60,105,150,168,175,200,280,525,1400,1400,2100,2100,2100],
[1,63,63,70,70,180,270,630,756,945,1260,1890,1890,1890],
[1,63,63,70,72,144,315,504,560,1680,1680,2520,2520,2520],
[1,63,105,140,189,280,360,378,1080,2520,2520,3780,3780,3780],
[1,70,75,75,168,200,200,300,525,1400,1400,2100,2100,2100],
[1,70,75,75,168,200,400,525,1200,2800,2800,4200,4200,4200],
[1,70,75,84,84,84,84,150,525,525,700,1050,1050,1050],
[1,70,75,105,140,150,168,350,525,1400,1400,2100,2100,2100],
[1,70,75,150,168,175,210,280,525,1400,1400,2100,2100,2100],
[1,75,105,105,150,168,210,350,1050,1050,1400,2100,2100,2100],
[1,75,140,150,168,175,175,420,420,1400,1400,2100,2100,2100],
[1,245,270,270,675,882,2450,11025,18900,44100,44100,66150,66150,66150],
[1,245,675,882,2450,2700,11025,13230,13230,44100,44100,66150,66150,66150],
[1,270,1225,2025,2268,4900,5670,33075,56700,132300,132300,198450,198450,198450],
[1,315,490,810,980,1620,2268,8820,19845,19845,26460,39690,39690,39690],
[1,315,875,882,1125,1960,18000,73500,126000,294000,294000,441000,441000,441000],
[1,350,405,1750,2268,3375,3780,23625,40500,94500,94500,141750,141750,141750],
[1,350,945,1620,1750,2268,4725,23625,40500,94500,94500,141750,141750,141750],
[1,441,675,1372,2700,3430,18522,77175,132300,308700,308700,463050,463050,463050],
[1,490,675,882,1225,2700,6615,14700,14700,44100,44100,66150,66150,66150],
[1,675,1225,2700,4900,11025,21168,52920,66150,176400,176400,264600,264600,264600],
[1,945,1225,1620,2268,4900,40500,165375,283500,661500,661500,992250,992250,992250]]

# out: 85 cases from 11 types (non-perfect)
Lout=[[1,1,1,1,1,1,1,1,2,2,2,2,2,2],
[1,1,1,1,2,2,2,2,2,4,4,4,6,6],
[1,1,1,1,2,2,2,4,4,4,4,4,4,4],
[1,1,1,1,2,3,3,3,3,4,4,4,4,6],
[1,1,1,1,4,4,9,9,9,9,12,12,18,18],
[1,1,1,3,3,3,3,3,4,4,4,4,4,4],		#Z(Rep(A4))
[1,1,2,2,2,2,3,3,3,3,3,3,6,6],
[1,1,2,2,2,3,3,4,4,4,4,4,4,4],
[1,1,2,3,3,6,6,12,12,16,16,16,24,24],
[1,1,2,3,3,24,24,42,42,56,56,56,84,84],
[1,1,2,3,3,24,120,150,150,200,200,200,300,300]]

# Total number of types remaining to consider: 37+11-2=46

sage: L=Lin+Lout

sage: P=[]
....: for l in L:
....:     if l[1]==1:
....:         s=list(factor(sum([i**2 for i in l])))
....:         p=[ss[0] for ss in s]
....:         p.sort()
....:         if not p in P:
....:            P.append(p)
....: P.sort(); P
[[2], [2, 3], [2, 3, 5], [2, 3, 5, 7], [2, 3, 7]]

sage: P=[]
....: for l in L:
....:     if l[1]!=1:
....:         s=list(factor(sum([i**2 for i in l])))
....:         p=[ss[0] for ss in s]
....:         p.sort()
....:         if not p in P:
....:            P.append(p)
....: P.sort(); P
[[2, 3, 5, 7]]

# Conclusion: possible set of prime factor for non-pointed non-perfect integral MFC of rank 14: [[2], [2, 3], [2, 3, 5], [2, 3, 5, 7], [2, 3, 7]]
# But, just [2, 3, 5, 7] for perfect

# Attempt of exclusion of the 6 types starting like [1,1,n,...] with n>=24

[1,1,24,24,36,40,45,45,90,90,90,180,180,180],
[1,1,40,84,90,126,315,315,504,630,840,1260,1260,1260],
[1,1,45,45,90,140,168,168,630,630,840,1260,1260,1260],
[1,1,60,60,84,140,189,189,540,1260,1260,1890,1890,1890],
[1,1,90,90,90,108,140,378,945,945,1260,1890,1890,1890],
[1,1,135,135,140,252,1080,1512,1890,1890,1890,3780,3780,3780]			# excluded (see below)


They reduce to the following 9 perfect types:
TTH=[[1,12,12,12,12,18,18,20,20,45,45,45,45,45,45,45,90,90],
[1,12,12,12,12,18,18,20,20,45,45,45,90,90,90],
[1,20,20,42,42,45,45,63,63,252,252,315,315,315,420,420,630,630],
[1,30,30,30,30,42,42,70,70,189,270,270,630,630,630,630,945,945],
[1,45,45,45,45,45,45,54,54,70,70,189,189,630,630,945,945,945],
[1,45,45,45,70,70,84,84,84,84,315,315,315,315,420,420,630,630],
[1,45,45,54,54,70,70,90,189,189,630,630,945,945,945],
[1,70,70,126,126,135,540,540,756,756,945,945,945,945,945,945,1890,1890],	# excluded later
[1,70,70,126,126,135,540,540,756,756,945,945,1890,1890,1890]]			#	
# Their rank:
sage: [len(l) for l in TTH]
[18, 15, 18, 18, 18, 18, 15, 18, 15]

# See Full/PartitionExo
sage: TypesToPreNormalizAlone(TTH) 

for i in *; do timeout 1s normaliz -x=4 -c "$i"; done
# there remain 7 uncompleted + 2 with solution
for i in *; do timeout 10s normaliz -x=4 -c "$i"; done
# there remain 5 uncompleted + 3 with solution
for i in *; do timeout 100s normaliz -x=4 -c "$i"; done
# there remain 4 uncompleted + 3 with solution



# Classification of all the fusion data for the 85 output files with a solution:

sage: for [l,d] in L:
....:     print([l,d])
....:     NormalizAlone(l,d)			# here Alone means only type and duality, all the equations are generated by Normaliz (to distinghish from Single means at most one solution)

Here are the only types yet not completed among these 85 cases:

[[1,1,1,1,1,1,1,1,2,2,2,2,2,2],
 [1,1,2,3,3,24,120,150,150,200,200,200,300,300],
 [1,1,2,3,3,24,24,42,42,56,56,56,84,84],
 [1,1,2,3,3,6,6,12,12,16,16,16,24,24]]


### PARTIAL RESULT ###

The type of an integral modular fusion category at rank 14 must be in the following list of 40 possible types (10 of which are non-perfect):

# Non-perfect case (#10)

[1,1,1,3,3,3,3,3,4,4,4,4,4,4], with 6 MD coming from Z(Vec(G,w)), already explicitely classified by Gruen-Morrison (see database /12/3/i with i=1,...,6),

plus possibly the following 9 uncompleted types:

- with fusion rings (but not all known yet):	#4

[1,1,1,1,1,1,1,1,2,2,2,2,2,2],
[1,1,2,3,3,24,120,150,150,200,200,200,300,300],			#
[1,1,2,3,3,24,24,42,42,56,56,56,84,84],				#
[1,1,2,3,3,6,6,12,12,16,16,16,24,24]

- not yet known whether there are fusion rings:	#5

[1,1,24,24,36,40,45,45,90,90,90,180,180,180],
[1,1,40,84,90,126,315,315,504,630,840,1260,1260,1260],
[1,1,45,45,90,140,168,168,630,630,840,1260,1260,1260],
[1,1,60,60,84,140,189,189,540,1260,1260,1890,1890,1890],
[1,1,90,90,90,108,140,378,945,945,1260,1890,1890,1890]

# Perfect case (#30)

[1,30,30,30,105,105,105,120,140,168,280,420,420,420],
[1,30,35,63,90,90,126,140,252,315,420,630,630,630],
[1,35,60,105,105,168,210,240,560,560,560,560,840,840],
[1,35,84,108,135,140,252,315,420,1260,1260,1890,1890,1890],
[1,35,105,108,126,135,140,378,420,1260,1260,1890,1890,1890],
[1,40,105,105,168,175,200,350,1050,1050,1400,2100,2100,2100],
[1,45,56,63,63,70,120,120,360,840,840,1260,1260,1260],
[1,50,50,105,105,168,175,210,600,1400,1400,2100,2100,2100],
[1,60,105,150,168,175,200,280,525,1400,1400,2100,2100,2100],
[1,63,63,70,70,180,270,630,756,945,1260,1890,1890,1890],
[1,63,63,70,72,144,315,504,560,1680,1680,2520,2520,2520],
[1,63,105,140,189,280,360,378,1080,2520,2520,3780,3780,3780],
[1,70,75,75,168,200,200,300,525,1400,1400,2100,2100,2100],
[1,70,75,75,168,200,400,525,1200,2800,2800,4200,4200,4200],
[1,70,75,84,84,84,84,150,525,525,700,1050,1050,1050],
[1,70,75,105,140,150,168,350,525,1400,1400,2100,2100,2100],
[1,70,75,150,168,175,210,280,525,1400,1400,2100,2100,2100],
[1,75,105,105,150,168,210,350,1050,1050,1400,2100,2100,2100],
[1,75,140,150,168,175,175,420,420,1400,1400,2100,2100,2100],
[1,245,270,270,675,882,2450,11025,18900,44100,44100,66150,66150,66150],
[1,245,675,882,2450,2700,11025,13230,13230,44100,44100,66150,66150,66150],
[1,270,1225,2025,2268,4900,5670,33075,56700,132300,132300,198450,198450,198450],
[1,315,490,810,980,1620,2268,8820,19845,19845,26460,39690,39690,39690],
[1,315,875,882,1125,1960,18000,73500,126000,294000,294000,441000,441000,441000],
[1,350,405,1750,2268,3375,3780,23625,40500,94500,94500,141750,141750,141750],
[1,350,945,1620,1750,2268,4725,23625,40500,94500,94500,141750,141750,141750],
[1,441,675,1372,2700,3430,18522,77175,132300,308700,308700,463050,463050,463050],
[1,490,675,882,1225,2700,6615,14700,14700,44100,44100,66150,66150,66150],
[1,675,1225,2700,4900,11025,21168,52920,66150,176400,176400,264600,264600,264600],
[1,945,1225,1620,2268,4900,40500,165375,283500,661500,661500,992250,992250,992250]


#################################################################################	Double-Checked
