# Application of modular criteria (related to grading) to the reduced list of non-perfect types

sage: %attach /home/sebastien/Nutstore Files/SAGE/TypeToNormaliz.sage
sage: %attach /home/sebastien/Nutstore Files/SAGE/Equipartition.sage

L0=[#[1,1,1,1,1,1,1,1,1,1,1,1,1],	#we remove the pointed type
[1,1,1,1,1,1,1,1,1,1,1,1,2],
[1,1,1,1,1,1,1,1,1,3,3,3,3],
[1,1,1,1,1,1,1,1,1,3,3,3,6],
[1,1,1,1,1,1,1,1,2,2,2,2,2],
[1,1,1,1,1,1,1,1,2,2,4,4,4],
[1,1,1,1,1,1,2,2,2,3,3,6,6],
[1,1,1,1,1,1,3,3,4,4,4,6,6],
[1,1,1,1,2,2,2,2,2,2,2,2,2],
[1,1,1,1,2,2,2,2,2,2,2,2,6],
[1,1,1,1,2,2,2,2,2,2,2,4,4],
[1,1,1,1,2,2,2,2,4,6,6,6,12],
[1,1,1,1,2,2,2,3,10,10,15,15,15],
[1,1,1,1,2,2,2,4,4,4,4,4,4],
[1,1,1,1,2,2,2,4,4,4,8,8,8],
[1,1,1,1,2,2,2,8,8,12,12,12,24],
[1,1,1,1,2,2,4,4,4,4,4,4,6],
[1,1,1,1,2,2,4,4,6,8,12,12,12],
[1,1,1,1,2,4,4,4,4,6,6,12,12],
[1,1,1,1,2,4,6,6,8,8,8,12,12],
[1,1,1,1,2,6,6,8,12,12,12,24,24],
[1,1,1,1,2,6,6,8,24,24,36,36,36],
[1,1,1,1,2,8,8,8,10,10,20,20,20],
[1,1,1,1,2,8,18,18,24,36,36,36,72],
[1,1,1,1,2,8,24,54,54,72,108,108,108],
[1,1,1,1,3,3,3,3,4,4,6,6,12],
[1,1,1,1,4,4,4,4,4,4,10,10,10],
[1,1,1,1,4,4,4,12,28,28,42,42,42],
[1,1,1,1,4,4,6,6,6,6,6,6,6],
[1,1,1,1,4,4,6,6,6,12,12,12,12],
[1,1,1,1,4,4,6,6,6,12,12,12,24],
[1,1,1,1,4,4,6,12,12,12,12,18,18],
[1,1,1,1,4,4,6,18,18,24,36,36,36],
[1,1,1,1,4,4,8,10,10,10,20,20,20],
[1,1,1,1,4,4,12,12,18,18,18,36,36],
[1,1,1,1,4,4,12,12,36,36,54,54,54],
[1,1,1,1,4,6,12,20,20,20,20,30,30],
[1,1,1,1,6,6,6,8,8,8,8,8,12],
[1,1,1,1,6,6,6,8,12,16,24,24,24],
[1,1,1,1,140,260,364,780,1820,1820,2730,2730,2730],
[1,1,1,2,2,2,2,2,2,3,6,6,6],
[1,1,1,2,2,2,3,4,4,4,6,6,12],
[1,1,1,2,2,3,3,3,3,3,4,6,6],
[1,1,1,2,2,3,4,6,6,6,12,12,12],
[1,1,1,2,2,3,4,12,12,18,18,18,36],
[1,1,1,2,2,4,6,6,9,12,18,18,18],
[1,1,1,3,4,4,4,4,4,4,6,12,12],
[1,1,1,3,4,4,4,6,8,8,8,12,12],
[1,1,1,3,4,4,6,8,12,12,12,24,24],
[1,1,1,3,4,4,6,8,24,24,36,36,36],
[1,1,1,3,6,8,8,8,8,8,8,12,24],
[1,1,1,3,6,8,8,12,16,24,24,24,48],
[1,1,1,3,6,12,16,16,16,16,16,16,24],
[1,1,1,3,6,12,16,16,24,32,48,48,48],
[1,1,1,3,6,12,16,24,64,64,96,96,96],
[1,1,1,3,6,12,56,96,224,224,336,336,336],
[1,1,1,3,6,20,20,24,24,40,60,60,60],
[1,1,1,3,6,20,24,24,80,80,120,120,120],
[1,1,1,3,6,28,48,112,112,168,168,168,336],
[1,1,1,3,6,48,56,56,84,112,168,168,168],
[1,1,1,3,6,48,56,84,224,224,336,336,336],
[1,1,1,3,6,48,196,336,784,784,1176,1176,1176],
[1,1,1,3,10,10,12,12,20,30,30,30,60],
[1,1,1,3,12,12,20,20,20,20,20,20,30],
[1,1,1,3,12,12,20,20,30,40,60,60,60],
[1,1,1,3,12,12,70,120,280,280,420,420,420],
[1,1,1,3,24,28,28,42,56,84,84,84,168],
[1,1,1,3,336,582,2716,4656,10864,10864,16296,16296,16296],
[1,1,1,3,336,2328,2716,4074,10864,10864,16296,16296,16296],
[1,1,1,5,5,10,18,18,18,30,45,45,45],
[1,1,1,12,12,15,28,60,140,140,210,210,210],
[1,1,1,12,12,24,34,51,136,136,204,204,204],
[1,1,2,2,2,2,2,3,3,4,4,6,6],
[1,1,2,2,2,2,3,3,3,3,3,3,6],
[1,1,2,2,2,2,3,3,3,6,9,9,9],
[1,1,2,2,2,2,3,3,6,6,6,6,6],
[1,1,2,2,2,2,3,3,6,6,6,12,12],
[1,1,2,2,2,2,3,3,12,12,18,18,18],
[1,1,2,2,2,2,4,4,5,5,10,10,10],
[1,1,2,2,2,2,6,6,6,6,9,9,18],
[1,1,2,2,2,5,5,5,6,10,15,15,15],
[1,1,2,2,2,5,5,6,20,20,30,30,30],
[1,1,2,2,2,6,10,10,10,10,15,15,30],
[1,1,2,2,2,6,15,15,20,30,30,30,60],
[1,1,2,2,3,3,4,4,4,4,4,6,12],
[1,1,2,2,3,3,4,6,8,12,12,12,24],
[1,1,2,2,3,3,5,6,6,10,15,15,15],
[1,1,2,2,38,60,114,285,285,380,570,570,570],
[1,1,2,3,3,3,3,3,3,4,4,4,6],
[1,1,2,3,3,4,4,4,6,6,12,12,12],
[1,1,2,3,3,6,6,8,8,8,12,12,24],
[1,1,2,3,3,10,20,24,30,40,60,60,60],
[1,1,2,3,3,24,30,30,40,40,40,60,60],
[1,1,2,3,15,16,40,48,60,80,120,120,120],
[1,1,2,3,120,124,372,465,1240,1240,1860,1860,1860],
[1,1,2,5,5,5,6,6,6,6,15,15,15],
[1,1,2,6,6,6,6,10,10,10,15,15,30],
[1,1,2,7,12,12,14,21,28,42,42,42,84],
[1,1,2,10,12,15,15,20,30,40,60,60,60],
[1,1,2,12,12,14,14,14,21,21,42,42,42],
[1,1,2,12,12,21,21,28,28,28,42,42,84],
[1,1,2,12,12,35,70,84,105,140,210,210,210],
[1,1,2,12,12,35,84,105,280,280,420,420,420],
[1,1,2,12,12,84,105,105,140,140,140,210,210],
[1,1,2,35,105,112,120,420,420,560,840,840,840],
[1,1,2,120,147,196,588,735,1960,1960,2940,2940,2940],
[1,1,2,120,245,588,735,1960,1960,2940,2940,2940,5880],
[1,1,3,3,4,4,6,6,6,8,8,12,12],
[1,1,4,4,5,6,6,12,15,20,30,30,30],
[1,1,5,5,6,6,20,24,30,40,60,60,60],
[1,1,5,5,10,10,15,18,18,30,45,45,45],
[1,1,5,8,8,12,15,24,30,40,60,60,60],
[1,1,14,18,21,36,36,36,63,84,126,126,126],
[1,1,15,15,18,18,45,50,150,150,225,225,225],
[1,1,15,15,26,26,30,39,130,130,195,195,195],
[1,1,15,15,30,39,78,78,78,130,195,195,195],
[1,1,15,21,28,28,30,42,140,140,210,210,210],
[1,1,18,18,50,75,75,75,90,150,225,225,225],
[1,1,30,30,63,140,180,252,315,420,630,630,630],
[1,1,34,40,51,60,204,255,680,680,1020,1020,1020],
[1,1,40,63,90,105,252,630,630,840,1260,1260,1260],
[1,1,55,88,140,1155,1320,1848,2310,3080,4620,4620,4620],
[1,1,63,135,140,252,540,1260,1260,1890,1890,1890,3780],
[1,1,66,66,99,759,828,1012,3036,3036,4554,4554,4554],
[1,1,72,184,207,216,414,621,1656,1656,2484,2484,2484],
[1,1,77,90,165,315,462,990,2310,2310,3465,3465,3465],
[1,1,84,91,105,156,910,1560,3640,3640,5460,5460,5460],
[1,1,84,105,156,1365,1560,2184,2730,3640,5460,5460,5460],
[1,1,90,140,378,567,2835,4860,11340,11340,17010,17010,17010],
[1,1,126,126,135,140,189,540,1260,1260,1890,1890,1890],
[1,1,510,714,3444,4879,24395,41820,97580,97580,146370,146370,146370],
[1,1,1020,1292,1710,4845,9690,11628,14535,19380,29070,29070,29070],
[1,1,1020,1292,1710,4845,11628,14535,38760,38760,58140,58140,58140],
[1,1,1020,1292,1710,11628,14535,14535,19380,19380,19380,29070,29070],
[1,1,1020,1710,4522,6783,33915,58140,135660,135660,203490,203490,203490]]

sage: L1=[]
....: for l in L0:
....:     print(l)
....:     S=squareequipartitiontype(l)
....:     if len(S)>0:
....:         L1.append(l)
sage: len(L0)
134
sage: len(L1)
88
sage: L2=[]; LL2=[]
....: for l in L1:
....:     print(l)
....:     S=squareequipartitiontype(l)
....:     for s in S:
....:         if s[0][1]!=1:
....:             LL2.append([l,s])
....:         else:
....:             t=ListToType(s[0])
....:             c=0
....:             if t[1][1]%2==0:
....:                 L2.append([l,s])
....:                 c=1
....:             else:
....:                 for tt in t[2:]:
....:                     if tt[1]%2==1:
....:                         L2.append([l,s])
....:                         c=1
....:                         break
....:             if c==0:
....:                 LL2.append([l,s])
sage: len(L1)
88
sage: len(L2)
87
sage: len(LL2)			# to be considered later
8
sage: print(LL2)
[[[1, 1, 1, 1, 2, 2, 4, 4, 4, 4, 4, 4, 6], [[1, 1, 1, 1, 4, 4], [2, 4, 4], [2, 4, 4], [6]]],
[[1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 10, 10, 10], [[1, 1, 1, 1, 4, 4, 4, 4, 4, 4], [10], [10], [10]]],
[[1, 1, 1, 1, 4, 4, 6, 12, 12, 12, 12, 18, 18], [[1, 1, 1, 1, 4, 4, 12, 12], [6, 12, 12], [18], [18]]],
[[1, 1, 1, 1, 4, 4, 12, 12, 36, 36, 54, 54, 54], [[1, 1, 1, 1, 4, 4, 12, 12, 36, 36], [54], [54], [54]]],
[[1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6], [[1, 2, 2, 3, 3, 3, 3, 3], [1, 2, 2, 3, 6]]],	# excluded by (0) but it does matter as the type has other partition
[[1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6], [[1, 1, 2, 2, 2, 2, 3, 3, 3, 3], [3, 3, 6]]],
[[1, 1, 2, 2, 2, 2, 3, 3, 6, 6, 6, 6, 6], [[1, 1, 2, 2, 2, 2, 3, 3, 6, 6], [6, 6, 6]]],
[[1, 1, 2, 2, 2, 2, 6, 6, 6, 6, 9, 9, 18], [[1, 1, 2, 2, 2, 2, 6, 6, 6, 6, 9, 9], [18]]]]

sage: L3=[]							# criterion (1)
....: for l in L2:
....:     c=0
....:     t=ListToType(l[0])
....:     for ll in l[1][1:]:
....:         lll=[1]
....:         lll.extend(ll)
....:         t=ListToType(lll)
....:         for tt in t[1:]:
....:             if tt[1]==1:
....:                 c=1
....:                 break
....:         if c==1:
....:             break
....:     if c==0:
....:         L3.append(l)
sage: len(L2)
87
sage: len(L3)
52			#apply (2)
sage: L3[:2]
[[[1, 1, 1, 1, 4, 4, 6, 6, 6, 6, 6, 6, 6],		# except this one where p non-prime (do it later) 
  [[1, 1, 1, 1, 4, 4, 6], [6, 6], [6, 6], [6, 6]]],
 [[1, 1, 1, 3, 6, 12, 16, 16, 16, 16, 16, 16, 24],
  [[1, 1, 1, 3, 6, 12, 24], [16, 16, 16], [16, 16, 16]]]]
sage: L4=[]
....: for l in L3[1:]:
....:     c=0
....:     ll=l[1][0]
....:     t=ListToType(ll)
....:     c=0
....:     if t[1][0]!=1:
....:         c=1
....:         print(l, 'perfect apply (0)')
....:     else:
....:         p=t[1][1]+1
....:         for tt in t[2:]:
....:             if tt[1]==1 and tt[0]%p!=0:		# criterion (2)
....:                 c=1
....:                 break
....:     if c==0:
....:         L4.append(l)
sage: len(L3)
53
sage: len(L4)
17
sage: print(L4)
[[[1, 1, 1, 3, 6, 12, 16, 16, 16, 16, 16, 16, 24], [[1, 1, 1, 3, 6, 12, 24], [16, 16, 16], [16, 16, 16]]],
[[1, 1, 1, 3, 12, 12, 20, 20, 20, 20, 20, 20, 30], [[1, 1, 1, 3, 12, 12, 30], [20, 20, 20], [20, 20, 20]]],
[[1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 6], [[1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4], [6, 6]]],
[[1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6], [[1, 1, 2, 2, 2, 2, 6], [3, 3, 3, 3, 3, 3]]],
[[1, 1, 2, 2, 2, 2, 3, 3, 12, 12, 18, 18, 18], [[1, 1, 2, 2, 2, 2, 3, 3, 12, 12, 18], [18, 18]]],
[[1, 1, 2, 2, 2, 2, 4, 4, 5, 5, 10, 10, 10], [[1, 1, 2, 2, 2, 2, 4, 4, 5, 5, 10], [10, 10]]],
[[1, 1, 2, 2, 2, 5, 5, 6, 20, 20, 30, 30, 30], [[1, 1, 2, 2, 2, 5, 5, 6, 20, 20, 30], [30, 30]]],
[[1, 1, 2, 2, 38, 60, 114, 285, 285, 380, 570, 570, 570], [[1, 1, 2, 2, 38, 60, 114, 285, 285, 380, 570], [570, 570]]],
[[1, 1, 2, 3, 3, 4, 4, 4, 6, 6, 12, 12, 12], [[1, 1, 2, 3, 3, 4, 4, 4, 6, 6, 12], [12, 12]]],
[[1, 1, 2, 3, 3, 10, 20, 24, 30, 40, 60, 60, 60], [[1, 1, 2, 3, 3, 10, 20, 24, 30, 40, 60], [60, 60]]],
[[1, 1, 2, 3, 3, 24, 30, 30, 40, 40, 40, 60, 60], [[1, 1, 2, 3, 3, 24, 30, 30, 40, 40, 40], [60, 60]]],
[[1, 1, 2, 10, 12, 15, 15, 20, 30, 40, 60, 60, 60], [[1, 1, 2, 10, 12, 15, 15, 20, 30, 40, 60], [60, 60]]],
[[1, 1, 2, 12, 12, 14, 14, 14, 21, 21, 42, 42, 42], [[1, 1, 2, 12, 12, 14, 14, 14, 21, 21, 42], [42, 42]]],
[[1, 1, 2, 12, 12, 84, 105, 105, 140, 140, 140, 210, 210], [[1, 1, 2, 12, 12, 84, 105, 105, 140, 140, 140], [210, 210]]],
[[1, 1, 3, 3, 4, 4, 6, 6, 6, 8, 8, 12, 12], [[1, 1, 3, 3, 4, 4, 6, 6, 6, 8, 8], [12, 12]]],
[[1, 1, 5, 5, 6, 6, 20, 24, 30, 40, 60, 60, 60], [[1, 1, 5, 5, 6, 6, 20, 24, 30, 40, 60], [60, 60]]],
[[1, 1, 1020, 1292, 1710, 11628, 14535, 14535, 19380, 19380, 19380, 29070, 29070], [[1, 1, 1020, 1292, 1710, 11628, 14535, 14535, 19380, 19380, 19380], [29070, 29070]]]]
sage: RL=[]		# rest to consider
sage: for l in LL2:
....:     ll=l[0]
....:     if not ll in RL:
....:         RL.append(ll)
....: 
sage: for l in L4:
....:     ll=l[0]
....:     if not ll in RL:
....:         RL.append(ll)
sage: RL.append([1, 1, 1, 1, 4, 4, 6, 6, 6, 6, 6, 6, 6])

sage: RL.sort()
sage: len(RL)
24 # +1 pointed
sage: RL
[#[1,1,1,1,1,1,1,1,1,1,1,1,1],
 [1, 1, 1, 1, 2, 2, 4, 4, 4, 4, 4, 4, 6],
 [1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 10, 10, 10],
 [1, 1, 1, 1, 4, 4, 6, 6, 6, 6, 6, 6, 6],
 [1, 1, 1, 1, 4, 4, 6, 12, 12, 12, 12, 18, 18],
 [1, 1, 1, 1, 4, 4, 12, 12, 36, 36, 54, 54, 54],
 [1, 1, 1, 3, 6, 12, 16, 16, 16, 16, 16, 16, 24],
 [1, 1, 1, 3, 12, 12, 20, 20, 20, 20, 20, 20, 30],
 [1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 4, 6, 6],
 [1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 6],
 [1, 1, 2, 2, 2, 2, 3, 3, 6, 6, 6, 6, 6],
 [1, 1, 2, 2, 2, 2, 3, 3, 12, 12, 18, 18, 18],
 [1, 1, 2, 2, 2, 2, 4, 4, 5, 5, 10, 10, 10],			# those without fusion rings
 [1, 1, 2, 2, 2, 2, 6, 6, 6, 6, 9, 9, 18],	
 [1, 1, 2, 2, 2, 5, 5, 6, 20, 20, 30, 30, 30],			#
 [1, 1, 2, 2, 38, 60, 114, 285, 285, 380, 570, 570, 570],	#
 [1, 1, 2, 3, 3, 4, 4, 4, 6, 6, 12, 12, 12],
 [1, 1, 2, 3, 3, 10, 20, 24, 30, 40, 60, 60, 60],		#
 [1, 1, 2, 3, 3, 24, 30, 30, 40, 40, 40, 60, 60],
 [1, 1, 2, 10, 12, 15, 15, 20, 30, 40, 60, 60, 60],		#	
 [1, 1, 2, 12, 12, 14, 14, 14, 21, 21, 42, 42, 42],		#
 [1, 1, 2, 12, 12, 84, 105, 105, 140, 140, 140, 210, 210],	#
 [1, 1, 3, 3, 4, 4, 6, 6, 6, 8, 8, 12, 12],			#
 [1, 1, 5, 5, 6, 6, 20, 24, 30, 40, 60, 60, 60],		#	
 [1, 1, 1020, 1292, 1710, 11628, 14535, 14535, 19380, 19380, 19380, 29070, 29070]]
So, the application of the modular grading related criteria (Proposition VI.2), reduces to the $24+1$ types above


#Among these 24+1 types, only the following 15+1 "may" have fusion rings
FL=[		
[1,1,1,1,1,1,1,1,1,1,1,1,1],	#those from Full1
[1,1,1,1,2,2,4,4,4,4,4,4,6],
[1,1,1,1,4,4,4,4,4,4,10,10,10],
[1,1,1,1,4,4,6,6,6,6,6,6,6],
[1,1,1,1,4,4,6,12,12,12,12,18,18],
[1,1,1,1,4,4,12,12,36,36,54,54,54],
[1,1,1,3,6,12,16,16,16,16,16,16,24],
[1,1,1,3,12,12,20,20,20,20,20,20,30],
[1,1,2,2,2,2,2,3,3,4,4,6,6],
[1,1,2,2,2,2,3,3,3,3,3,3,6],
[1,1,2,2,2,2,3,3,6,6,6,6,6],
[1,1,2,2,2,2,3,3,12,12,18,18,18],
[1,1,2,2,2,2,6,6,6,6,9,9,18],
[1,1,2,3,3,4,4,4,6,6,12,12,12],
[1,1,2,3,3,24,30,30,40,40,40,60,60],	#those from Full2
[1,1,1020,1292,1710,11628,14535,14535,19380,19380,19380,29070,29070]]	# existence of fusion ring in progress

# Those passing the fusion ring ModularCriterion
FL2=[[1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,4,4,4,4,4,4,10,10,10],
[1,1,1,1,4,4,12,12,36,36,54,54,54],
[1,1,1,3,6,12,16,16,16,16,16,16,24],
[1,1,1,3,12,12,20,20,20,20,20,20,30],
[1,1,2,3,3,24,30,30,40,40,40,60,60]]

# Those SelfTransposable
FL3=[[1,1,1,1,1,1,1,1,1,1,1,1,1],
[1,1,1,1,4,4,4,4,4,4,10,10,10],
[1,1,1,1,4,4,12,12,36,36,54,54,54],
[1,1,1,3,6,12,16,16,16,16,16,16,24],
[1,1,1,3,12,12,20,20,20,20,20,20,30],
[1,1,2,3,3,24,30,30,40,40,40,60,60]]

# Those passing the magic criterion: only [1,1,1,1,1,1,1,1,1,1,1,1,1]

Warning: their also remain [1,1,1020,1292,1710,11628,14535,14535,19380,19380,19380,29070,29070], open to fusion ring.


